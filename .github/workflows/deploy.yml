name: "deploy"

on:
  workflow_dispatch:
    inputs:
      deploy_path:
        description: "S3 directory deployment location"
        default: "uswds-redesign"
  workflow_call:
    inputs:
      deploy_path:
        required: false
        type: string

jobs:
  deploy-dev:
    if: github.actor != 'dependabot[bot]'
    permissions:
      contents: read
      id-token: write
    runs-on: codebuild-dpc-static-site-${{github.run_id}}-${{github.run_attempt}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          cache: 'npm'
          node-version-file: '.nvmrc'
          # node-version: 20 ## Using a .nvmrc file to stay in sync with the repo
     
      - name: Install jekyll and bundler
        run: |
          gem install bundler
          bundle install
  
      - name: Install npm dependencies
        run: |
          npm ci

      - name: Compile assets with Gulp
        run: |
          npm run assets:build

      - name: Build the site
        env:
          # This is redundant but keeping for posterity
          JEKYLL_ENV: "production"
        run: |
          bundle exec jekyll build --baseurl ${{ inputs.deploy_path && format('/{0}', inputs.deploy_path) || ''}}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.PROD_ACCOUNT }}:role/delegatedadmin/developer/dpc-sandbox-github-actions
      
      - name: Set env vars from AWS params
        uses: cmsgov/cdap/actions/aws-params-env-action@main
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
        with:
          params: |
            TARGET_BUCKET=/dpc/sandbox/static_site

      - name: Deploy the site
        # This $TARGET_BUCKET comes from the step above, cmsgov/cdap/actions/aws-params-env-action@main
        run: |
          aws s3 sync _site/ s3://$TARGET_BUCKET/${{ inputs.deploy_path }}/ --delete
      
      - name: Invalidate Cloudfront cache
        run: |
          DISTRIBUTION_ID=`aws cloudfront list-distributions --query "DistributionList.Items[].{Id:Id, OriginId: Origins.Items[0].Id}[?OriginId=='$TARGET_BUCKET'].Id" --output text`
          aws cloudfront create-invalidation --distribution-id "$DISTRIBUTION_ID" --paths "/*"
